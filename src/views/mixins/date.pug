//- Date Formatting Mixins
//-
//- Use these mixins for consistent, accessible date display across all templates.
//- All mixins use semantic <time> elements with proper datetime attributes.
//-
//- IMPORTANT: Never use .toLocaleDateString() directly in templates.
//- Always use these mixins for date formatting.

//- Short date format: MM/DD/YYYY
//- Used for compact display in tables and lists
//-
//- @param {string|Date} date - The date to format
//- @param {string} [label] - Optional aria-label for screen readers
//-
//- Examples:
//-   +shortDate(submission.submitted_on)
//-   +shortDate(award.date_awarded, "Award granted on")
mixin shortDate(date, label)
	if date
		- const d = new Date(date)
		- if (!isNaN(d.getTime())) {
			- const formatted = new Intl.DateTimeFormat('en-US', { timeZone: 'UTC', month: '2-digit', day: '2-digit', year: 'numeric' }).format(d)
			- const iso = d.toISOString()
			time(datetime=iso aria-label=label)= formatted
		- } else {
			span -
		- }
	else
		span -

//- Long date format: "Month DD, YYYY"
//- Used for detailed views and formal contexts
//-
//- @param {string|Date} date - The date to format
//- @param {string} [label] - Optional aria-label for screen readers
//-
//- Examples:
//-   +longDate(submission.approved_on)
//-   +longDate(member.created_at, "Member since")
mixin longDate(date, label)
	if date
		- const d = new Date(date)
		- if (!isNaN(d.getTime())) {
			- const formatted = new Intl.DateTimeFormat('en-US', { timeZone: 'UTC', month: 'long', day: 'numeric', year: 'numeric' }).format(d)
			- const iso = d.toISOString()
			time(datetime=iso aria-label=label)= formatted
		- } else {
			span -
		- }
	else
		span -

//- Relative date format: "X days ago"
//- Used for activity feeds and recent events
//-
//- @param {string|Date} date - The date to format
//- @param {string} [label] - Optional aria-label for screen readers
//-
//- Examples:
//-   +relativeDate(activity.created_at)
//-   +relativeDate(submission.submitted_on, "Submitted")
mixin relativeDate(date, label)
	if date
		- const d = new Date(date)
		- if (!isNaN(d.getTime())) {
			- const now = new Date()
			- const diffMs = now.getTime() - d.getTime()
			- const diffSec = Math.floor(diffMs / 1000)
			- const diffMin = Math.floor(diffSec / 60)
			- const diffHour = Math.floor(diffMin / 60)
			- const diffDay = Math.floor(diffHour / 24)
			- const diffWeek = Math.floor(diffDay / 7)
			- const diffMonth = Math.floor(diffDay / 30)
			- const diffYear = Math.floor(diffDay / 365)
			- let formatted = ''
			- if (diffMs < 0) formatted = 'in the future'
			- else if (diffMin < 1) formatted = 'just now'
			- else if (diffHour < 1) formatted = diffMin === 1 ? '1 minute ago' : `${diffMin} minutes ago`
			- else if (diffDay < 1) formatted = diffHour === 1 ? '1 hour ago' : `${diffHour} hours ago`
			- else if (diffWeek < 1) formatted = diffDay === 1 ? '1 day ago' : `${diffDay} days ago`
			- else if (diffMonth < 1) formatted = diffWeek === 1 ? '1 week ago' : `${diffWeek} weeks ago`
			- else if (diffYear < 1) formatted = diffMonth === 1 ? '1 month ago' : `${diffMonth} months ago`
			- else formatted = diffYear === 1 ? '1 year ago' : `${diffYear} years ago`
			- const iso = d.toISOString()
			time(datetime=iso aria-label=label)= formatted
		- } else {
			span -
		- }
	else
		span -

//- Flexible date format with custom format type
//- Used when you need specific formatting in special contexts
//-
//- @param {string|Date} date - The date to format
//- @param {string} [format='short'] - Format type: 'short', 'long', or 'relative'
//- @param {string} [label] - Optional aria-label for screen readers
//-
//- Examples:
//-   +dateTime(submission.submitted_on, 'short')
//-   +dateTime(activity.created_at, 'relative', 'Activity occurred')
mixin dateTime(date, format = 'short', label)
	- if (format === 'long') {
		+longDate(date, label)
	- } else if (format === 'relative') {
		+relativeDate(date, label)
	- } else {
		+shortDate(date, label)
	- }
