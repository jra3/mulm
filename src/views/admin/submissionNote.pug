//- Single admin note display
//- Used for rendering individual notes (including HTMX insertions)
//- Check if this is a structured edit log or a regular note
-
	let editLog = null;
	try {
		const parsed = JSON.parse(note.note_text);
		if (parsed.type === 'admin_edit') {
			editLog = parsed;
		}
	} catch (e) {
		// Not JSON, treat as regular note
	}

if editLog
	//- Render as formatted edit log
	-
		function fieldDisplayName(field) {
			const names = {
				'points': 'Base Points',
				'article_points': 'Article Points',
				'first_time_species': 'First Time Species',
				'cares_species': 'CARES Species',
				'flowered': 'Flowered',
				'sexual_reproduction': 'Sexual Reproduction',
				'reproduction_date': 'Reproduction Date',
				'count': 'Count',
				'foods': 'Foods',
				'spawn_locations': 'Spawn Locations',
				'video_url': 'Video URL',
				'tank_size': 'Tank Size',
				'filter_type': 'Filter Type',
				'water_change_volume': 'Water Change Volume',
				'water_change_frequency': 'Water Change Frequency',
				'temperature': 'Temperature',
				'ph': 'pH',
				'gh': 'Hardness',
				'specific_gravity': 'Specific Gravity',
				'substrate_type': 'Substrate Type',
				'substrate_depth': 'Substrate Depth',
				'substrate_color': 'Substrate Color',
				'light_type': 'Light Type',
				'light_strength': 'Light Strength',
				'light_hours': 'Light Hours',
				'co2': 'CO2',
				'co2_description': 'CO2 Description',
				'propagation_method': 'Propagation Method',
			};
			return names[field] || field;
		}

		function formatValue(field, value) {
			if (value === null || value === undefined) return '(none)';
			if (value === '') return '(empty)';
			if (typeof value === 'boolean') return value ? '✓ Yes' : '✗ No';

			// Format dates nicely
			if (field === 'reproduction_date' && value) {
				const date = new Date(value);
				if (!isNaN(date.getTime())) {
					return new Intl.DateTimeFormat('en-US', {
						month: '2-digit',
						day: '2-digit',
						year: 'numeric',
						timeZone: 'UTC'
					}).format(date);
				}
			}

			return String(value);
		}

	div.bg-white.rounded.border-2.border-amber-400.p-4(id=`note-${note.id}`)
		.flex.justify-between.items-start.mb-3
			.flex.items-center.gap-2
				.w-8.h-8.bg-amber-400.rounded-full.flex.items-center.justify-center
					span.text-lg ✏️
				div
					.font-semibold.text-gray-900= note.admin_name || 'Former Admin'
					.text-xs.text-gray-600= new Date(note.created_at).toLocaleString()

			button.text-xs.text-red-600.hover_text-red-800(
				type="button"
				hx-delete=`/admin/submissions/${note.submission_id}/notes/${note.id}`
				hx-confirm="Delete this edit log?"
				hx-target=`#note-${note.id}`
				hx-swap="outerHTML"
			) Delete

		.mb-3.bg-amber-50.rounded.p-3.border.border-amber-200
			.text-xs.font-medium.text-amber-900.mb-1 Reason:
			.text-sm.text-gray-900= editLog.reason

		.space-y-1
			.text-xs.font-medium.text-gray-900.mb-2 Changes:
			each change in editLog.changes
				.flex.items-center.gap-2.text-sm.pl-4
					.font-mono.text-gray-700.min-w-fit= fieldDisplayName(change.field) + ':'
					.flex.items-center.gap-2
						if change.old !== null && change.old !== undefined && change.old !== ''
							span.line-through.text-red-600= formatValue(change.field, change.old)
							span.text-gray-500 →
						span.text-green-600.font-semibold= formatValue(change.field, change.new)

else
	//- Render as regular note
	div.bg-white.rounded.border.border-gray-300.p-3(id=`note-${note.id}`)
		div.flex.justify-between.items-start.mb-2
			div.flex.items-center.gap-2
				if note.admin_name
					span.text-sm.font-semibold.text-gray-700= note.admin_name
				else
					span.text-sm.font-semibold.text-gray-400.italic Former Admin
				span.text-xs.text-gray-500= new Date(note.created_at).toLocaleString()

			//- Action buttons
			div.flex.gap-3(id=`note-actions-${note.id}`)
				button.text-xs.text-red-600(
					class="hover:text-red-800"
					type="button"
					hx-delete=`/admin/submissions/${note.submission_id}/notes/${note.id}`
					hx-confirm="Are you sure you want to delete this note?"
					hx-target=`#note-${note.id}`
					hx-swap="outerHTML"
				) Delete

		//- Note text (double-click to edit)
		p.text-sm.text-gray-800.whitespace-pre-wrap(
			class="cursor-pointer"
			hx-get=`/admin/submissions/${note.submission_id}/notes/${note.id}/edit`
			hx-trigger="dblclick"
			hx-target=`#note-${note.id}`
			hx-swap="outerHTML"
		)= note.note_text

